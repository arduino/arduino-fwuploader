version: "3"

includes:
  dist: ./DistTasks.yml

tasks:
  poetry:install-deps:
    desc: Install dependencies managed by Poetry
    cmds:
      - poetry install --no-root

  docs:serve:
    desc: Run website locally
    deps:
      - task: poetry:install-deps
      - task: docs:gen:commands
    cmds:
      - poetry run mkdocs serve

  docs:publish:
    desc: Use Mike to build and push versioned docs
    deps:
      - docs:gen:commands
    cmds:
      - poetry run mike deploy --update-aliases --push --remote {{.DOCS_REMOTE}} {{.DOCS_VERSION}} {{.DOCS_ALIAS}}

  docs:generate:
    desc: Create all generated documentation content
    deps:
      - task: docs:gen:commands

  docs:gen:commands:
    desc: Generate command reference files
    dir: ./docsgen
    cmds:
      # docs will generate examples using os.Args[0] so we need to call
      # the generator `arduino-fwuploader`
      - go build -o {{.PROJECT_NAME}}{{exeExt}}
      # we invoke `arduino-fwuploader` like this instead of `./arduino-fwuploader` to remove
      # the `./` chars from the examples
      - PATH=. {{.PROJECT_NAME}} ../docs/commands
      - task: docs:format

  docs:check:
    desc: Run documentation linting
    cmds:
      - npx {{ .PRETTIER }} --check "**/*.md"

  docs:check-links:
    desc: Verifies there are no dead links in documentation
    deps:
      - task: docs:generate
    cmds:
      - |
        npx -p markdown-link-check -c '
        STATUS=0
        for file in $(find -name "*.md"); do
          markdown-link-check -c markdown-link-check-config.json -q "$file"
          STATUS=$(( $STATUS + $? ))
        done
        exit $STATUS'

  docs:format:
    desc: Automatically formats documentation
    cmds:
      - npx {{ .PRETTIER }} --write "**/*.md"

  docs:build:
    desc: Build documentation website contents
    deps:
      - docs:gen:commands
      - poetry:install-deps
    cmds:
      - poetry run mkdocs build -s

  build:
    desc: Build the project
    cmds:
      - go build -v {{.LDFLAGS}}

  test:
    desc: Run tests
    cmds:
      - task: test-unit
      - task: test-integration

  test-unit:
    desc: Run unit tests
    cmds:
      - go test -short -race -run '.*' {{ default "-v" .GOFLAGS }} -coverprofile=coverage_unit.txt ./... {{.TEST_LDFLAGS}}

  test-integration:
    desc: Run integration tests
    cmds:
      - task: build
      - task: poetry:install-deps
      - poetry run pytest test

  check:
    desc: Check fmt and lint
    cmds:
      - test -z $(go fmt ./...)
      - go vet ./...
      - "'{{.GOLINTBIN}}' {{.GOLINTFLAGS}} ./..."
      - task: docs:check
      - task: config:check
      - task: general:check-formatting
      - task: python:check

  config:check:
    desc: Check linting of configuration and supporting files
    cmds:
      - npx {{ .PRETTIER }} --check "**/*.{yml,yaml}"

  config:format:
    desc: Automatically formats configuration and supporting files
    cmds:
      - npx {{ .PRETTIER }} --write "**/*.{yml,yaml}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        if ! which ec &>/dev/null; then
          echo "ec not found or not in PATH. Please install: https://github.com/editorconfig-checker/editorconfig-checker#installation"
          exit 1
        fi
      - ec

  python:check:
    cmds:
      - task: python:lint

  python:lint:
    desc: Lint Python code
    cmds:
      - task: poetry:install-deps
      - poetry run flake8

  python:format:
    desc: Automatically formats Python files
    cmds:
      - task: poetry:install-deps
      - poetry run black .

vars:
  PROJECT_NAME: "arduino-fwuploader"
  DIST_DIR: "dist"
  # build vars
  COMMIT:
    sh: echo "$(git log -n 1 --format=%h)"
  TIMESTAMP:
    sh: echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  TIMESTAMP_SHORT:
    sh: echo "{{now | date "20060102"}}"
  TAG:
    sh: echo "`git tag --points-at=HEAD 2> /dev/null | head -n1`"
  VERSION: "{{ if .NIGHTLY }}nightly-{{ .TIMESTAMP_SHORT }}{{ else if .TAG }}{{ .TAG }}{{ else }}{{ .PACKAGE_NAME_PREFIX }}git-snapshot{{ end }}"
  LDFLAGS: >
    -ldflags
    '
    -X github.com/arduino/arduino-fwuploader/version.versionString={{.VERSION}}
    -X github.com/arduino/arduino-fwuploader/version.commit={{ .COMMIT }}
    -X github.com/arduino/arduino-fwuploader/version.date={{.TIMESTAMP}}
    '
  # test vars
  GOFLAGS: "-timeout 10m -v -coverpkg=./... -covermode=atomic"
  TEST_VERSION: "0.0.0-test.preview"
  TEST_COMMIT: "deadbeef"
  TEST_LDFLAGS: >
    -ldflags
    '
    -X github.com/arduino/arduino-fwuploader/version.versionString={{.TEST_VERSION}}
    -X github.com/arduino/arduino-fwuploader/version.commit={{.TEST_COMMIT}}
    -X github.com/arduino/arduino-fwuploader/version.date={{.TIMESTAMP}}
    '
  # check-lint vars
  GOLINTBIN:
    sh: go list -f {{"{{"}}".Target{{"}}"}}" golang.org/x/lint/golint
  GOLINTFLAGS: "-min_confidence 0.8 -set_exit_status"
  PRETTIER: prettier@2.0.5
  DOCS_VERSION: dev
  DOCS_ALIAS: ""
  DOCS_REMOTE: "origin"
